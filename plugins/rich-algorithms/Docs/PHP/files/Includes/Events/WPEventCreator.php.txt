<?php

/*
 * This file is part of Rich Algorithms.
 *
 * Copyright (c) Richard Webster
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace RichWeb\Algorithms\Events;

use RichWeb\Algorithms\Interfaces\EventCreatorInterface;

use function do_action;

class WPEventCreator implements EventCreatorInterface
{
    /**
     * Creates a new event that other objects can subscribe to using the WordPress Plugin API. Essentially a wrapper for the `do_action()` WP function.
     *
     * Example usage:
     * 
     * ```php
     * $creator = new WPEventCreator();
     * // Without any arguments
     * $creator->create('event_name');
     * // With arguments (any number of arguments are accepted)
     * $creator->create('event_name', $arg1, $arg2);
     * ```
     * 
     * Objects or functions can subscribe to an event using the WPEventSubscriber object.
     * 
     * An event differs from a filter in that an event is not assigned to any variable and doesn't return a value.
     * 
     * @uses \do_action() WP Function
     * 
     * @see https://developer.wordpress.org/plugins/hooks/ WordPress hooks
     * @see WPEventSubscriber                              Event subscriber class.
     */
    final function create(string $event, mixed ...$args): void
    {
        do_action($event, $args);
    }

    /**
     * Creates a new filter for a value so that other objects can intercept and change using the WordPress Plugin API. Essentially a wrapper for the `apply_filters()` WP function.
     *
     * Example usage:
     * 
     * ```php
     * $creator = new WPEventCreator();
     * $value = 'Hello'
     * $value = $creator->filter('filter_name', $value);
     * 
     * // Change the value and return using a new WPEventSubscriber() event.
     * $subscriber = new WPEventSubscriber();
     * $object     = new SomeClass();
     * // Using an object
     * // 'methodName' should be a public method on the $object
     * $subscriber->subscribe('filter_name', [$object, 'methodName'], 10, 1);
     * // Using a function
     * $subscriber->subscribe('filter_name', 'someFunction', 10, 1);
     * 
     * // Object callback
     * class SomeClass
     * {
     *     // This method is called when the filter 'filter_name' is triggered
     *     public function methodName(mixed $value): mixed
     *     {
     *         return $value . ' World ';
     *     }
     * }
     * 
     * // Function callback
     * // This function is called when the filter 'filter_name' is triggered
     * function someFunction(mixed $value): mixed
     * {
     *     return $value . ' World ';
     * }
     * 
     * echo $value; // will output 'Hello World'
     * 
     * ```
     * 
     * Objects or functions can subscribe to a filter using the WPEventSubscriber object.
     * 
     * A filter differs from an event in that a filter is assigned to a variable and returns a value.
     * 
     * @uses \apply_filters() WP Function
     * 
     * @see https://developer.wordpress.org/plugins/hooks/ WordPress hooks
     * @see WPEventSubscriber                              Event subscriber class.
     */
    final public function filter(string $filter, mixed $value, mixed ...$args): mixed
    {
        return apply_filters($filter, $value, $args);
    }
}
